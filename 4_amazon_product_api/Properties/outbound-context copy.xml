<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
			http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
			http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
			http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
			http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd 
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<context:property-placeholder
		location="file:////Users/Yogi/Study/Projects/amazon_product_api/Properties/app.properties" />
 
	<!-- ======================================== Polling the Root Record Queue ================================= -->

	<int:channel id="rootQueue" />

	<bean id="RootQueueRowMapper"
		class="com.staples.em.magnus.publish.poller.dao.RootQueueRowMapper" />


	<int-file:inbound-channel-adapter id="filesIn4"
    directory="file:${input.directory}"
    filename-regex="*.txt" />
    
     
	<int-jdbc:inbound-channel-adapter
		channel="rootQueue" max-rows-per-poll="1000"
		update="delete from PAP01_OWN.PB_ROOT_RCRD_QUEUE where ROOT_RCRD_DBKY in (:rootRcrdDbky)" 
		query="select * from PAP01_OWN.PB_ROOT_RCRD_QUEUE" data-source="dataSource"
		row-mapper="RootQueueRowMapper">

		<int:poller fixed-rate="${cmpntQueuePollerRate}">
			<int:transactional />
		</int:poller>
	</int-jdbc:inbound-channel-adapter>

	<!-- ==============================   Splitter, Router and Service for Root Record   ================================== -->

	<int:channel id="rootQueueSplit">
		<int:dispatcher task-executor="publishTaskExecutor"></int:dispatcher>
	</int:channel>
 
	<int:channel id="errorCmpntQueue" />
	<int:channel id="dataStream" />
	
    <int:splitter input-channel="rootQueue" output-channel="rootQueueSplit" />
	
	<int:router input-channel="rootQueueSplit" resolution-required="false" expression="payload.rootTypDbky"
		default-output-channel="errorCmpntQueue">
		<int:mapping value="14001" channel="pdtAttrRoot" />
		<int:mapping value="14004" channel="promoAttrRoot" />
	</int:router>
	
	
	<!-- ProductRoot Service for root type Product -->
	<int:service-activator input-channel="pdtAttrRoot"
		ref="productRootService" output-channel="dataStream" />
	
	<!-- Promo Service for root type Promo -->
	<int:service-activator input-channel="promoAttrRoot"
		ref="promoRootService" output-channel="dataStream" />

	<int:service-activator input-channel="errorCmpntQueue" ref="cmpntQueueErrorHandler" />
	
	<!-- ============================== Splitter and Router for DataStream  ==================================== -->
 	<int:channel id="dataStreamSplit" />
	
	<int:splitter input-channel="dataStream" output-channel="dataStreamSplit" />
	
 	<int-amqp:outbound-channel-adapter
		channel="dataStreamSplit" amqp-template="amqpTemplate" exchange-name="magnus.publish.exchange"
		routing-key-expression="'consumer.'+headers.routingKey" />  
	 
		
   	<int:service-activator input-channel="errorPromoDataStreamQueue" ref="cmpntQueueErrorHandler" />
   		
	<!-- ============================== RabbitMQ Infrastructure  ==================================== -->
	
	<rabbit:connection-factory id="connectionFactory"
	host="${rabbitmq.host}" username="${rabbitmq.username}" password="${rabbitmq.password}"    />
 
	<rabbit:template id="amqpTemplate" connection-factory="connectionFactory"  />

	<rabbit:admin connection-factory="connectionFactory" />

	<rabbit:queue name="catalog2.queue" />
	<rabbit:queue name="edw.queue" />

	 <rabbit:topic-exchange  name="magnus.publish.exchange">
		<rabbit:bindings>
			<rabbit:binding queue="catalog2.queue" pattern="consumer.1" />
		 	<rabbit:binding queue="edw.queue" pattern="consumer.41" />
		</rabbit:bindings>
	</rabbit:topic-exchange>
	 

<!-- ============================================ Global Declarations =========================================== -->

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<int:poller default="true" fixed-rate="1" />
	<task:executor id="publishTaskExecutor" pool-size="${corePoolSize}" />

</beans>
<!-- ============================================================================================================= -->
